// En Rese침asBO.java actualizado sin uso de ObjectId en la l칩gica de negocio
package itson.rutappbo.implementaciones;

import itson.persistenciarutapp.IRese침aDAO;
import itson.persistenciarutapp.ICamionesDAO;
import itson.persistenciarutapp.IUsuariosDAO;
import itson.persistenciarutapp.entidades.Rese침a;
import itson.persistenciarutapp.implementaciones.Rese침aDAO;
import itson.persistenciarutapp.implementaciones.CamionesDAO;
import itson.persistenciarutapp.implementaciones.UsuariosDAO;
import itson.rutappbo.IRese침aBO;
import itson.rutappdto.Rese침aDTO;
import itson.rutappdto.UsuarioDTO;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import mappers.Rese침aMapper;
//import org.bson.types.ObjectId; YA NOOO LO USAMOOOOOOS 游땙游땙游땙游땙游땙游땙游땙游땙游땙游땙
import usuarioActivoManager.UsuarioActivoManager;
import util.ValidadorRese침as;

public class Rese침asBO implements IRese침aBO {

    private final IRese침aDAO rese침asDAO = new Rese침aDAO();
    private final ICamionesDAO camionesDAO = new CamionesDAO();
    private final IUsuariosDAO usuariosDAO = new UsuariosDAO();

    public Rese침asBO() {
    }

    @Override
    public void agregarRese침a(Rese침aDTO rese침aDTO) throws Exception {
        ValidadorRese침as.validar(rese침aDTO);

        UsuarioDTO usuarioDTO = UsuarioActivoManager.getInstancia().getUsuario();
        String idUsuario = usuarioDTO.getId();

        String idCamion = camionesDAO.obtenerIdCamionPorNumero(rese침aDTO.getNumeroCamion());

        if (idCamion == null) {
            throw new Exception("El cami칩n especificado no existe.");
        }

        int conteo = rese침asDAO.contarRese침asUsuarioPorCamion(idUsuario, idCamion);
        if (conteo >= 3) {
            throw new Exception("Solo puedes dejar hasta 3 rese침as por cami칩n.");
        }

        rese침aDTO.setFecha(new Date());

        Rese침a rese침a = Rese침aMapper.toEntity(rese침aDTO, idUsuario, idCamion);

        rese침asDAO.agregarRese침a(rese침a);
    }

    @Override
    public List<Rese침aDTO> obtenerRese침asPorCamion(String numeroCamion) {
        String idCamion = camionesDAO.obtenerIdCamionPorNumero(numeroCamion);
        List<Rese침a> rese침as = rese침asDAO.obtenerRese침asPorCamion(idCamion);

        return rese침as.stream()
                .map(r -> {
                    String nombreUsuario = usuariosDAO.obtenerNombrePorId(r.obtenerIdUsuarioComoString());
                    return Rese침aMapper.toDTO(r, nombreUsuario, numeroCamion);
                })
                .collect(Collectors.toList());
    }

    @Override
    public boolean eliminarRese침a(String idRese침a) {
        Rese침a rese침a = rese침asDAO.obtenerRese침aPorId(idRese침a);
        if (rese침a == null) {
            return false;
        }

        String idUsuarioActivo = UsuarioActivoManager.getInstancia().getUsuario().getId();
        if (!rese침a.obtenerIdUsuarioComoString().equals(idUsuarioActivo)) {
            return false;
        }

        long ahora = System.currentTimeMillis();
        long tiempoRese침a = rese침a.getFecha().getTime();
        if ((ahora - tiempoRese침a) > 10 * 60 * 1000) {
            return false;
        }

        return rese침asDAO.eliminarRese침aPorId(idRese침a);
    }
}
